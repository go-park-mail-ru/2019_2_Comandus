// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/user-contract/usecase.go

// Package ucase_mocks is a generated GoMock package.
package ucase_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContractUsecase is a mock of Usecase interface
type MockContractUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockContractUsecaseMockRecorder
}

// MockContractUsecaseMockRecorder is the mock recorder for MockContractUsecase
type MockContractUsecaseMockRecorder struct {
	mock *MockContractUsecase
}

// NewMockContractUsecase creates a new mock instance
func NewMockContractUsecase(ctrl *gomock.Controller) *MockContractUsecase {
	mock := &MockContractUsecase{ctrl: ctrl}
	mock.recorder = &MockContractUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractUsecase) EXPECT() *MockContractUsecaseMockRecorder {
	return m.recorder
}

// CreateContract mocks base method
func (m *MockContractUsecase) CreateContract(user *model.User, responseId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContract", user, responseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContract indicates an expected call of CreateContract
func (mr *MockContractUsecaseMockRecorder) CreateContract(user, responseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContract", reflect.TypeOf((*MockContractUsecase)(nil).CreateContract), user, responseId)
}

// SetAsDone mocks base method
func (m *MockContractUsecase) SetAsDone(user *model.User, contractId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAsDone", user, contractId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAsDone indicates an expected call of SetAsDone
func (mr *MockContractUsecaseMockRecorder) SetAsDone(user, contractId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAsDone", reflect.TypeOf((*MockContractUsecase)(nil).SetAsDone), user, contractId)
}

// ReviewContract mocks base method
func (m *MockContractUsecase) ReviewContract(user *model.User, contractId int64, grade int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReviewContract", user, contractId, grade)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReviewContract indicates an expected call of ReviewContract
func (mr *MockContractUsecaseMockRecorder) ReviewContract(user, contractId, grade interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReviewContract", reflect.TypeOf((*MockContractUsecase)(nil).ReviewContract), user, contractId, grade)
}
