// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/user-response/usecase.go

// Package ucase_mocks is a generated GoMock package.
package ucase_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResponseUsecase is a mock of UserUcase interface
type MockResponseUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockResponseUsecaseMockRecorder
}

// MockResponseUsecaseMockRecorder is the mock recorder for MockResponseUsecase
type MockResponseUsecaseMockRecorder struct {
	mock *MockResponseUsecase
}

// NewMockResponseUsecase creates a new mock instance
func NewMockResponseUsecase(ctrl *gomock.Controller) *MockResponseUsecase {
	mock := &MockResponseUsecase{ctrl: ctrl}
	mock.recorder = &MockResponseUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseUsecase) EXPECT() *MockResponseUsecaseMockRecorder {
	return m.recorder
}

// CreateResponse mocks base method
func (m *MockResponseUsecase) CreateResponse(user *model.User, jobId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResponse", user, jobId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResponse indicates an expected call of CreateResponse
func (mr *MockResponseUsecaseMockRecorder) CreateResponse(user, jobId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResponse", reflect.TypeOf((*MockResponseUsecase)(nil).CreateResponse), user, jobId)
}

// GetResponses mocks base method
func (m *MockResponseUsecase) GetResponses(user *model.User) (*[]model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResponses", user)
	ret0, _ := ret[0].(*[]model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResponses indicates an expected call of GetResponses
func (mr *MockResponseUsecaseMockRecorder) GetResponses(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResponses", reflect.TypeOf((*MockResponseUsecase)(nil).GetResponses), user)
}

// AcceptResponse mocks base method
func (m *MockResponseUsecase) AcceptResponse(user *model.User, responseId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptResponse", user, responseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptResponse indicates an expected call of AcceptResponse
func (mr *MockResponseUsecaseMockRecorder) AcceptResponse(user, responseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptResponse", reflect.TypeOf((*MockResponseUsecase)(nil).AcceptResponse), user, responseId)
}

// DenyResponse mocks base method
func (m *MockResponseUsecase) DenyResponse(user *model.User, responseId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyResponse", user, responseId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DenyResponse indicates an expected call of DenyResponse
func (mr *MockResponseUsecaseMockRecorder) DenyResponse(user, responseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyResponse", reflect.TypeOf((*MockResponseUsecase)(nil).DenyResponse), user, responseId)
}
