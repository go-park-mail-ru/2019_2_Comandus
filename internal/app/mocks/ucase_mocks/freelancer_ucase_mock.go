// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/freelancer/usecase.go

// Package ucase_mocks is a generated GoMock package.
package ucase_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFreelancerUsecase is a mock of Usecase interface
type MockFreelancerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFreelancerUsecaseMockRecorder
}

// MockFreelancerUsecaseMockRecorder is the mock recorder for MockFreelancerUsecase
type MockFreelancerUsecaseMockRecorder struct {
	mock *MockFreelancerUsecase
}

// NewMockFreelancerUsecase creates a new mock instance
func NewMockFreelancerUsecase(ctrl *gomock.Controller) *MockFreelancerUsecase {
	mock := &MockFreelancerUsecase{ctrl: ctrl}
	mock.recorder = &MockFreelancerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFreelancerUsecase) EXPECT() *MockFreelancerUsecaseMockRecorder {
	return m.recorder
}

// FindByUser mocks base method
func (m *MockFreelancerUsecase) FindByUser(user *model.User) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", user)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser
func (mr *MockFreelancerUsecaseMockRecorder) FindByUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockFreelancerUsecase)(nil).FindByUser), user)
}

// Find mocks base method
func (m *MockFreelancerUsecase) Find(id int64) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFreelancerUsecaseMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFreelancerUsecase)(nil).Find), id)
}

// Edit mocks base method
func (m *MockFreelancerUsecase) Edit(new, old *model.Freelancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", new, old)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockFreelancerUsecaseMockRecorder) Edit(new, old interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockFreelancerUsecase)(nil).Edit), new, old)
}
