// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/clients/interfaces/userClient.go

// Package client_mocks is a generated GoMock package.
package client_mocks

import (
	user_grpc "github.com/go-park-mail-ru/2019_2_Comandus/internal/app/user/delivery/grpc/user_grpc"
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockClientUser is a mock of ClientUser interface
type MockClientUser struct {
	ctrl     *gomock.Controller
	recorder *MockClientUserMockRecorder
}

// MockClientUserMockRecorder is the mock recorder for MockClientUser
type MockClientUserMockRecorder struct {
	mock *MockClientUser
}

// NewMockClientUser creates a new mock instance
func NewMockClientUser(ctrl *gomock.Controller) *MockClientUser {
	mock := &MockClientUser{ctrl: ctrl}
	mock.recorder = &MockClientUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientUser) EXPECT() *MockClientUserMockRecorder {
	return m.recorder
}

// CreateUserOnServer mocks base method
func (m *MockClientUser) CreateUserOnServer(data *model.User) (*user_grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserOnServer", data)
	ret0, _ := ret[0].(*user_grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserOnServer indicates an expected call of CreateUserOnServer
func (mr *MockClientUserMockRecorder) CreateUserOnServer(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserOnServer", reflect.TypeOf((*MockClientUser)(nil).CreateUserOnServer), data)
}

// VerifyUserOnServer mocks base method
func (m *MockClientUser) VerifyUserOnServer(user *model.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUserOnServer", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUserOnServer indicates an expected call of VerifyUserOnServer
func (mr *MockClientUserMockRecorder) VerifyUserOnServer(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUserOnServer", reflect.TypeOf((*MockClientUser)(nil).VerifyUserOnServer), user)
}

// GetUserFromServer mocks base method
func (m *MockClientUser) GetUserFromServer(userID *user_grpc.UserID) (*user_grpc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromServer", userID)
	ret0, _ := ret[0].(*user_grpc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFromServer indicates an expected call of GetUserFromServer
func (mr *MockClientUserMockRecorder) GetUserFromServer(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromServer", reflect.TypeOf((*MockClientUser)(nil).GetUserFromServer), userID)
}
