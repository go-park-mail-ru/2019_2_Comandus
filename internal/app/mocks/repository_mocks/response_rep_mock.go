// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/user-response/repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockResponseRepository is a mock of Repository interface
type MockResponseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockResponseRepositoryMockRecorder
}

// MockResponseRepositoryMockRecorder is the mock recorder for MockResponseRepository
type MockResponseRepositoryMockRecorder struct {
	mock *MockResponseRepository
}

// NewMockResponseRepository creates a new mock instance
func NewMockResponseRepository(ctrl *gomock.Controller) *MockResponseRepository {
	mock := &MockResponseRepository{ctrl: ctrl}
	mock.recorder = &MockResponseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResponseRepository) EXPECT() *MockResponseRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockResponseRepository) Create(response *model.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockResponseRepositoryMockRecorder) Create(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockResponseRepository)(nil).Create), response)
}

// Edit mocks base method
func (m *MockResponseRepository) Edit(response *model.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockResponseRepositoryMockRecorder) Edit(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockResponseRepository)(nil).Edit), response)
}

// ListForFreelancer mocks base method
func (m *MockResponseRepository) ListForFreelancer(arg0 int64) ([]model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForFreelancer", arg0)
	ret0, _ := ret[0].([]model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForFreelancer indicates an expected call of ListForFreelancer
func (mr *MockResponseRepositoryMockRecorder) ListForFreelancer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForFreelancer", reflect.TypeOf((*MockResponseRepository)(nil).ListForFreelancer), arg0)
}

// ListForManager mocks base method
func (m *MockResponseRepository) ListForManager(arg0 int64) ([]model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListForManager", arg0)
	ret0, _ := ret[0].([]model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListForManager indicates an expected call of ListForManager
func (mr *MockResponseRepositoryMockRecorder) ListForManager(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListForManager", reflect.TypeOf((*MockResponseRepository)(nil).ListForManager), arg0)
}

// Find mocks base method
func (m *MockResponseRepository) Find(arg0 int64) (*model.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockResponseRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockResponseRepository)(nil).Find), arg0)
}
