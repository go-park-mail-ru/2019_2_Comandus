// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/freelancer/repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFreelancerRepository is a mock of Repository interface
type MockFreelancerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFreelancerRepositoryMockRecorder
}

// MockFreelancerRepositoryMockRecorder is the mock recorder for MockFreelancerRepository
type MockFreelancerRepositoryMockRecorder struct {
	mock *MockFreelancerRepository
}

// NewMockFreelancerRepository creates a new mock instance
func NewMockFreelancerRepository(ctrl *gomock.Controller) *MockFreelancerRepository {
	mock := &MockFreelancerRepository{ctrl: ctrl}
	mock.recorder = &MockFreelancerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFreelancerRepository) EXPECT() *MockFreelancerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockFreelancerRepository) Create(freelancer *model.Freelancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", freelancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockFreelancerRepositoryMockRecorder) Create(freelancer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFreelancerRepository)(nil).Create), freelancer)
}

// Find mocks base method
func (m *MockFreelancerRepository) Find(arg0 int64) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockFreelancerRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFreelancerRepository)(nil).Find), arg0)
}

// FindByUser mocks base method
func (m *MockFreelancerRepository) FindByUser(arg0 int64) (*model.Freelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUser", arg0)
	ret0, _ := ret[0].(*model.Freelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUser indicates an expected call of FindByUser
func (mr *MockFreelancerRepositoryMockRecorder) FindByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUser", reflect.TypeOf((*MockFreelancerRepository)(nil).FindByUser), arg0)
}

// Edit mocks base method
func (m *MockFreelancerRepository) Edit(freelancer *model.Freelancer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", freelancer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockFreelancerRepositoryMockRecorder) Edit(freelancer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockFreelancerRepository)(nil).Edit), freelancer)
}

// ListOnPattern mocks base method
func (m *MockFreelancerRepository) ListOnPattern(arg0 string) ([]model.ExtendFreelancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOnPattern", arg0)
	ret0, _ := ret[0].([]model.ExtendFreelancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOnPattern indicates an expected call of ListOnPattern
func (mr *MockFreelancerRepositoryMockRecorder) ListOnPattern(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOnPattern", reflect.TypeOf((*MockFreelancerRepository)(nil).ListOnPattern), arg0)
}
