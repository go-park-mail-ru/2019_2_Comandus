// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/contract/repository.go

// Package repository_mocks is a generated GoMock package.
package repository_mocks

import (
	model "github.com/go-park-mail-ru/2019_2_Comandus/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockContractRepository is a mock of Repository interface
type MockContractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockContractRepositoryMockRecorder
}

// MockContractRepositoryMockRecorder is the mock recorder for MockContractRepository
type MockContractRepositoryMockRecorder struct {
	mock *MockContractRepository
}

// NewMockContractRepository creates a new mock instance
func NewMockContractRepository(ctrl *gomock.Controller) *MockContractRepository {
	mock := &MockContractRepository{ctrl: ctrl}
	mock.recorder = &MockContractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockContractRepository) EXPECT() *MockContractRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockContractRepository) Create(contract *model.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockContractRepositoryMockRecorder) Create(contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockContractRepository)(nil).Create), contract)
}

// Edit mocks base method
func (m *MockContractRepository) Edit(contract *model.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit
func (mr *MockContractRepositoryMockRecorder) Edit(contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockContractRepository)(nil).Edit), contract)
}

// List mocks base method
func (m *MockContractRepository) List(arg0 int64, arg1 string) ([]model.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]model.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockContractRepositoryMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockContractRepository)(nil).List), arg0, arg1)
}

// Find mocks base method
func (m *MockContractRepository) Find(arg0 int64) (*model.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*model.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockContractRepositoryMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockContractRepository)(nil).Find), arg0)
}
