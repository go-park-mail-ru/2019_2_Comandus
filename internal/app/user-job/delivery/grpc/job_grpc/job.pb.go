// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/app/user-job/delivery/grpc/job_grpc/job.proto

package job_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Job struct {
	ID                   int64                `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	HireManagerId        int64                `protobuf:"varint,2,opt,name=HireManagerId,proto3" json:"HireManagerId,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title,omitempty"`
	Description          string               `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
	Files                string               `protobuf:"bytes,5,opt,name=Files,proto3" json:"Files,omitempty"`
	SpecialityId         int64                `protobuf:"varint,6,opt,name=SpecialityId,proto3" json:"SpecialityId,omitempty"`
	ExperienceLevelId    int64                `protobuf:"varint,7,opt,name=ExperienceLevelId,proto3" json:"ExperienceLevelId,omitempty"`
	PaymentAmount        float32              `protobuf:"fixed32,8,opt,name=PaymentAmount,proto3" json:"PaymentAmount,omitempty"`
	Country              int64                `protobuf:"varint,9,opt,name=Country,proto3" json:"Country,omitempty"`
	City                 int64                `protobuf:"varint,10,opt,name=City,proto3" json:"City,omitempty"`
	JobTypeId            int64                `protobuf:"varint,11,opt,name=JobTypeId,proto3" json:"JobTypeId,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,12,opt,name=Date,proto3" json:"Date,omitempty"`
	Status               string               `protobuf:"bytes,13,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb2f2bee06019de, []int{0}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Job) GetHireManagerId() int64 {
	if m != nil {
		return m.HireManagerId
	}
	return 0
}

func (m *Job) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Job) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Job) GetFiles() string {
	if m != nil {
		return m.Files
	}
	return ""
}

func (m *Job) GetSpecialityId() int64 {
	if m != nil {
		return m.SpecialityId
	}
	return 0
}

func (m *Job) GetExperienceLevelId() int64 {
	if m != nil {
		return m.ExperienceLevelId
	}
	return 0
}

func (m *Job) GetPaymentAmount() float32 {
	if m != nil {
		return m.PaymentAmount
	}
	return 0
}

func (m *Job) GetCountry() int64 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *Job) GetCity() int64 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *Job) GetJobTypeId() int64 {
	if m != nil {
		return m.JobTypeId
	}
	return 0
}

func (m *Job) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type JobID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JobID) Reset()         { *m = JobID{} }
func (m *JobID) String() string { return proto.CompactTextString(m) }
func (*JobID) ProtoMessage()    {}
func (*JobID) Descriptor() ([]byte, []int) {
	return fileDescriptor_5eb2f2bee06019de, []int{1}
}

func (m *JobID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JobID.Unmarshal(m, b)
}
func (m *JobID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JobID.Marshal(b, m, deterministic)
}
func (m *JobID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JobID.Merge(m, src)
}
func (m *JobID) XXX_Size() int {
	return xxx_messageInfo_JobID.Size(m)
}
func (m *JobID) XXX_DiscardUnknown() {
	xxx_messageInfo_JobID.DiscardUnknown(m)
}

var xxx_messageInfo_JobID proto.InternalMessageInfo

func (m *JobID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*Job)(nil), "job_grpc.Job")
	proto.RegisterType((*JobID)(nil), "job_grpc.JobID")
}

func init() {
	proto.RegisterFile("internal/app/user-job/delivery/grpc/job_grpc/job.proto", fileDescriptor_5eb2f2bee06019de)
}

var fileDescriptor_5eb2f2bee06019de = []byte{
	// 380 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x5f, 0x8b, 0xd4, 0x30,
	0x14, 0xc5, 0xe9, 0x4c, 0x67, 0x76, 0xe7, 0xce, 0x8e, 0x62, 0x10, 0x0d, 0x83, 0x60, 0x19, 0x44,
	0xfa, 0xa0, 0x2d, 0xac, 0xe2, 0xbb, 0x6c, 0x5d, 0xb6, 0x45, 0x41, 0xba, 0xf3, 0x2e, 0x49, 0x7b,
	0x2d, 0x59, 0xd2, 0x24, 0xa4, 0xe9, 0x60, 0x3f, 0x88, 0xdf, 0x57, 0x26, 0xb5, 0x68, 0xf5, 0xed,
	0x9e, 0xdf, 0xb9, 0x37, 0x7f, 0xce, 0x85, 0x0f, 0x42, 0x39, 0xb4, 0x8a, 0xc9, 0x94, 0x19, 0x93,
	0xf6, 0x1d, 0xda, 0xb7, 0x0f, 0x9a, 0xa7, 0x35, 0x4a, 0x71, 0x42, 0x3b, 0xa4, 0x8d, 0x35, 0x55,
	0xfa, 0xa0, 0xf9, 0xb7, 0xa9, 0x48, 0x8c, 0xd5, 0x4e, 0x93, 0xcb, 0x89, 0xed, 0x5f, 0x36, 0x5a,
	0x37, 0x12, 0x53, 0xcf, 0x79, 0xff, 0x3d, 0x75, 0xa2, 0xc5, 0xce, 0xb1, 0xd6, 0x8c, 0xad, 0x87,
	0x9f, 0x4b, 0x58, 0x16, 0x9a, 0x93, 0x47, 0xb0, 0xc8, 0x33, 0x1a, 0x44, 0x41, 0xbc, 0x2c, 0x17,
	0x79, 0x46, 0x5e, 0xc1, 0xee, 0x4e, 0x58, 0xfc, 0xc2, 0x14, 0x6b, 0xd0, 0xe6, 0x35, 0x5d, 0x78,
	0x6b, 0x0e, 0xc9, 0x53, 0x58, 0x1d, 0x85, 0x93, 0x48, 0x97, 0x51, 0x10, 0x6f, 0xca, 0x51, 0x90,
	0x08, 0xb6, 0x19, 0x76, 0x95, 0x15, 0xc6, 0x09, 0xad, 0x68, 0xe8, 0xbd, 0xbf, 0xd1, 0x79, 0xee,
	0x56, 0x48, 0xec, 0xe8, 0x6a, 0x9c, 0xf3, 0x82, 0x1c, 0xe0, 0xea, 0xde, 0x60, 0x25, 0x98, 0x14,
	0x6e, 0xc8, 0x6b, 0xba, 0xf6, 0x57, 0xce, 0x18, 0x79, 0x03, 0x4f, 0x3e, 0xfd, 0x30, 0x68, 0x05,
	0xaa, 0x0a, 0x3f, 0xe3, 0x09, 0x65, 0x5e, 0xd3, 0x0b, 0xdf, 0xf8, 0xbf, 0x71, 0xfe, 0xc5, 0x57,
	0x36, 0xb4, 0xa8, 0xdc, 0xc7, 0x56, 0xf7, 0xca, 0xd1, 0xcb, 0x28, 0x88, 0x17, 0xe5, 0x1c, 0x12,
	0x0a, 0x17, 0x37, 0xe7, 0xc2, 0x0e, 0x74, 0xe3, 0x4f, 0x9a, 0x24, 0x21, 0x10, 0xde, 0x08, 0x37,
	0x50, 0xf0, 0xd8, 0xd7, 0xe4, 0x05, 0x6c, 0x0a, 0xcd, 0x8f, 0x83, 0xc1, 0xbc, 0xa6, 0x5b, 0x6f,
	0xfc, 0x01, 0x24, 0x81, 0x30, 0x63, 0x0e, 0xe9, 0x55, 0x14, 0xc4, 0xdb, 0xeb, 0x7d, 0x32, 0xe6,
	0x9f, 0x4c, 0xf9, 0x27, 0xc7, 0x29, 0xff, 0xd2, 0xf7, 0x91, 0x67, 0xb0, 0xbe, 0x77, 0xcc, 0xf5,
	0x1d, 0xdd, 0xf9, 0x28, 0x7e, 0xab, 0xc3, 0x73, 0x58, 0x15, 0x9a, 0xe7, 0xd9, 0xbf, 0x8b, 0xb9,
	0x7e, 0x0f, 0x50, 0x68, 0x7e, 0xc7, 0x54, 0x2d, 0xd1, 0x92, 0xd7, 0x10, 0xde, 0x0a, 0x55, 0x93,
	0xc7, 0xc9, 0xb4, 0xf2, 0xc4, 0x8f, 0xed, 0x77, 0x33, 0xc0, 0xd7, 0xfe, 0x01, 0xef, 0x7e, 0x05,
	0x00, 0x00, 0xff, 0xff, 0x92, 0x9b, 0xb4, 0x55, 0x52, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JobHandlerClient is the client API for JobHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobHandlerClient interface {
	Find(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Job, error)
}

type jobHandlerClient struct {
	cc *grpc.ClientConn
}

func NewJobHandlerClient(cc *grpc.ClientConn) JobHandlerClient {
	return &jobHandlerClient{cc}
}

func (c *jobHandlerClient) Find(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/job_grpc.JobHandler/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobHandlerServer is the server API for JobHandler service.
type JobHandlerServer interface {
	Find(context.Context, *JobID) (*Job, error)
}

// UnimplementedJobHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedJobHandlerServer struct {
}

func (*UnimplementedJobHandlerServer) Find(ctx context.Context, req *JobID) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}

func RegisterJobHandlerServer(s *grpc.Server, srv JobHandlerServer) {
	s.RegisterService(&_JobHandler_serviceDesc, srv)
}

func _JobHandler_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobHandlerServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/job_grpc.JobHandler/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobHandlerServer).Find(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

var _JobHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "job_grpc.JobHandler",
	HandlerType: (*JobHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Find",
			Handler:    _JobHandler_Find_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/app/user-job/delivery/grpc/job_grpc/job.proto",
}
