// Code generated by protoc-gen-go. DO NOT EDIT.
// source: general.proto

package general_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Token struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{0}
}

func (m *Token) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Token.Unmarshal(m, b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Token.Marshal(b, m, deterministic)
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return xxx_messageInfo_Token.Size(m)
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

type UserID struct {
	ID                   int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserID) Reset()         { *m = UserID{} }
func (m *UserID) String() string { return proto.CompactTextString(m) }
func (*UserID) ProtoMessage()    {}
func (*UserID) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{1}
}

func (m *UserID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserID.Unmarshal(m, b)
}
func (m *UserID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserID.Marshal(b, m, deterministic)
}
func (m *UserID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserID.Merge(m, src)
}
func (m *UserID) XXX_Size() int {
	return xxx_messageInfo_UserID.Size(m)
}
func (m *UserID) XXX_DiscardUnknown() {
	xxx_messageInfo_UserID.DiscardUnknown(m)
}

var xxx_messageInfo_UserID proto.InternalMessageInfo

func (m *UserID) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*Token)(nil), "general_grpc.Token")
	proto.RegisterType((*UserID)(nil), "general_grpc.UserID")
}

func init() { proto.RegisterFile("general.proto", fileDescriptor_a913b1a5d8940539) }

var fileDescriptor_a913b1a5d8940539 = []byte{
	// 127 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0xcd, 0x4b,
	0x2d, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x81, 0x72, 0xe3, 0xd3, 0x8b,
	0x0a, 0x92, 0x95, 0xc4, 0xb9, 0x58, 0x43, 0xf2, 0xb3, 0x53, 0xf3, 0x84, 0xf8, 0xb8, 0x98, 0x3c,
	0x5d, 0x24, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x98, 0x3c, 0x5d, 0x94, 0x24, 0xb8, 0xd8, 0x42,
	0x8b, 0x53, 0x8b, 0x3c, 0x5d, 0xd0, 0x65, 0x8c, 0xdc, 0xb9, 0xf8, 0xdc, 0x21, 0x46, 0x78, 0x24,
	0xe6, 0xa5, 0xe4, 0xa4, 0x16, 0x09, 0x99, 0x72, 0x71, 0xb8, 0xa7, 0x96, 0x40, 0xcc, 0x11, 0xd1,
	0x43, 0x36, 0x5f, 0x0f, 0x62, 0x86, 0x94, 0x30, 0xaa, 0x28, 0x58, 0x69, 0x12, 0x1b, 0xd8, 0x41,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6e, 0x86, 0xe2, 0xa2, 0xa1, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GeneralHandlerClient is the client API for GeneralHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GeneralHandlerClient interface {
	GetToken(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Token, error)
}

type generalHandlerClient struct {
	cc *grpc.ClientConn
}

func NewGeneralHandlerClient(cc *grpc.ClientConn) GeneralHandlerClient {
	return &generalHandlerClient{cc}
}

func (c *generalHandlerClient) GetToken(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/general_grpc.GeneralHandler/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralHandlerServer is the server API for GeneralHandler service.
type GeneralHandlerServer interface {
	GetToken(context.Context, *UserID) (*Token, error)
}

// UnimplementedGeneralHandlerServer can be embedded to have forward compatible implementations.
type UnimplementedGeneralHandlerServer struct {
}

func (*UnimplementedGeneralHandlerServer) GetToken(ctx context.Context, req *UserID) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterGeneralHandlerServer(s *grpc.Server, srv GeneralHandlerServer) {
	s.RegisterService(&_GeneralHandler_serviceDesc, srv)
}

func _GeneralHandler_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralHandlerServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/general_grpc.GeneralHandler/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralHandlerServer).GetToken(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeneralHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "general_grpc.GeneralHandler",
	HandlerType: (*GeneralHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _GeneralHandler_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}
