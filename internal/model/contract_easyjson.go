// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel(in *jlexer.Lexer, out *ContractOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Job":
			easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel1(in, &out.Job)
		case "Contract":
			(out.Contract).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel(out *jwriter.Writer, in ContractOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Job\":"
		out.RawString(prefix[1:])
		easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel1(out, in.Job)
	}
	{
		const prefix string = ",\"Contract\":"
		out.RawString(prefix)
		(in.Contract).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel(l, v)
}
func easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel1(in *jlexer.Lexer, out *Job) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "hireManagerId":
			out.HireManagerId = int64(in.Int64Str())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "files":
			out.Files = string(in.String())
		case "specialityId":
			out.SpecialityId = int64(in.Int64Str())
		case "experienceLevelId":
			out.ExperienceLevelId = int64(in.Int64Str())
		case "paymentAmount":
			out.PaymentAmount = float32(in.Float32Str())
		case "country":
			out.Country = int64(in.Int64())
		case "city":
			out.City = int64(in.Int64())
		case "jobTypeId":
			out.JobTypeId = int64(in.Int64Str())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel1(out *jwriter.Writer, in Job) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"hireManagerId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.HireManagerId))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		out.String(string(in.Files))
	}
	{
		const prefix string = ",\"specialityId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.SpecialityId))
	}
	{
		const prefix string = ",\"experienceLevelId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.ExperienceLevelId))
	}
	{
		const prefix string = ",\"paymentAmount\":"
		out.RawString(prefix)
		out.Float32Str(float32(in.PaymentAmount))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.Int64(int64(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Int64(int64(in.City))
	}
	{
		const prefix string = ",\"jobTypeId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.JobTypeId))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}
func easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel2(in *jlexer.Lexer, out *Contract) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "responseId":
			out.ResponseID = int64(in.Int64())
		case "companyId":
			out.CompanyID = int64(in.Int64())
		case "freelancerId":
			out.FreelancerID = int64(in.Int64())
		case "startTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartTime).UnmarshalJSON(data))
			}
		case "endTime":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndTime).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		case "freelancerGrade":
			out.FreelancerGrade = int(in.Int())
		case "freelancerComment":
			out.FreelancerComment = string(in.String())
		case "clientGrade":
			out.ClientGrade = int(in.Int())
		case "clientComment":
			out.ClientComment = string(in.String())
		case "paymentAmount":
			out.PaymentAmount = float32(in.Float32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel2(out *jwriter.Writer, in Contract) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"responseId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ResponseID))
	}
	{
		const prefix string = ",\"companyId\":"
		out.RawString(prefix)
		out.Int64(int64(in.CompanyID))
	}
	{
		const prefix string = ",\"freelancerId\":"
		out.RawString(prefix)
		out.Int64(int64(in.FreelancerID))
	}
	{
		const prefix string = ",\"startTime\":"
		out.RawString(prefix)
		out.Raw((in.StartTime).MarshalJSON())
	}
	{
		const prefix string = ",\"endTime\":"
		out.RawString(prefix)
		out.Raw((in.EndTime).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"freelancerGrade\":"
		out.RawString(prefix)
		out.Int(int(in.FreelancerGrade))
	}
	{
		const prefix string = ",\"freelancerComment\":"
		out.RawString(prefix)
		out.String(string(in.FreelancerComment))
	}
	{
		const prefix string = ",\"clientGrade\":"
		out.RawString(prefix)
		out.Int(int(in.ClientGrade))
	}
	{
		const prefix string = ",\"clientComment\":"
		out.RawString(prefix)
		out.String(string(in.ClientComment))
	}
	{
		const prefix string = ",\"paymentAmount\":"
		out.RawString(prefix)
		out.Float32(float32(in.PaymentAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contract) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contract) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson42340b0aEncodeGithubComGoParkMailRu20192ComandusInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contract) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contract) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson42340b0aDecodeGithubComGoParkMailRu20192ComandusInternalModel2(l, v)
}
