// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel(in *jlexer.Lexer, out *ResponseOutputWithFreel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Job":
			(out.Job).UnmarshalEasyJSON(in)
		case "Response":
			(out.Response).UnmarshalEasyJSON(in)
		case "Freelancer":
			(out.Freelancer).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel(out *jwriter.Writer, in ResponseOutputWithFreel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Job\":"
		out.RawString(prefix[1:])
		(in.Job).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Response\":"
		out.RawString(prefix)
		(in.Response).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Freelancer\":"
		out.RawString(prefix)
		(in.Freelancer).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseOutputWithFreel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseOutputWithFreel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseOutputWithFreel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseOutputWithFreel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel(l, v)
}
func easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "freelancerId":
			out.FreelancerId = int64(in.Int64())
		case "jobId":
			out.JobId = int64(in.Int64())
		case "files":
			out.Files = string(in.String())
		case "date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Date).UnmarshalJSON(data))
			}
		case "statusManager":
			out.StatusManager = string(in.String())
		case "statusFreelancer":
			out.StatusFreelancer = string(in.String())
		case "paymentAmount":
			out.PaymentAmount = float32(in.Float32Str())
		case "coverLetter":
			out.CoverLetter = string(in.String())
		case "timeEstimation":
			out.TimeEstimation = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"freelancerId\":"
		out.RawString(prefix)
		out.Int64(int64(in.FreelancerId))
	}
	{
		const prefix string = ",\"jobId\":"
		out.RawString(prefix)
		out.Int64(int64(in.JobId))
	}
	{
		const prefix string = ",\"files\":"
		out.RawString(prefix)
		out.String(string(in.Files))
	}
	{
		const prefix string = ",\"date\":"
		out.RawString(prefix)
		out.Raw((in.Date).MarshalJSON())
	}
	{
		const prefix string = ",\"statusManager\":"
		out.RawString(prefix)
		out.String(string(in.StatusManager))
	}
	{
		const prefix string = ",\"statusFreelancer\":"
		out.RawString(prefix)
		out.String(string(in.StatusFreelancer))
	}
	{
		const prefix string = ",\"paymentAmount\":"
		out.RawString(prefix)
		out.Float32Str(float32(in.PaymentAmount))
	}
	{
		const prefix string = ",\"coverLetter\":"
		out.RawString(prefix)
		out.String(string(in.CoverLetter))
	}
	{
		const prefix string = ",\"timeEstimation\":"
		out.RawString(prefix)
		out.Int(int(in.TimeEstimation))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6ff3ac1dEncodeGithubComGoParkMailRu20192ComandusInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6ff3ac1dDecodeGithubComGoParkMailRu20192ComandusInternalModel1(l, v)
}
