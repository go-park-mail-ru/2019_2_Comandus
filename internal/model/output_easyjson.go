// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel(in *jlexer.Lexer, out *Review) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "companyName":
			out.CompanyName = string(in.String())
		case "jobTitle":
			out.JobTitle = string(in.String())
		case "clientGrade":
			out.ClientGrade = int(in.Int())
		case "clientComment":
			out.ClientComment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel(out *jwriter.Writer, in Review) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"companyName\":"
		out.RawString(prefix[1:])
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"jobTitle\":"
		out.RawString(prefix)
		out.String(string(in.JobTitle))
	}
	{
		const prefix string = ",\"clientGrade\":"
		out.RawString(prefix)
		out.Int(int(in.ClientGrade))
	}
	{
		const prefix string = ",\"clientComment\":"
		out.RawString(prefix)
		out.String(string(in.ClientComment))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Review) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Review) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Review) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Review) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel1(in *jlexer.Lexer, out *PublicContractVersion) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		case "jobTitle":
			out.JobTitle = string(in.String())
		case "companyName":
			out.CompanyName = string(in.String())
		case "freelancerGrade":
			out.FreelancerGrade = int(in.Int())
		case "freelancerComment":
			out.FreelancerComment = string(in.String())
		case "clientGrade":
			out.ClientGrade = int(in.Int())
		case "clientComment":
			out.ClientComment = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel1(out *jwriter.Writer, in PublicContractVersion) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"jobTitle\":"
		out.RawString(prefix)
		out.String(string(in.JobTitle))
	}
	{
		const prefix string = ",\"companyName\":"
		out.RawString(prefix)
		out.String(string(in.CompanyName))
	}
	{
		const prefix string = ",\"freelancerGrade\":"
		out.RawString(prefix)
		out.Int(int(in.FreelancerGrade))
	}
	{
		const prefix string = ",\"freelancerComment\":"
		out.RawString(prefix)
		out.String(string(in.FreelancerComment))
	}
	{
		const prefix string = ",\"clientGrade\":"
		out.RawString(prefix)
		out.Int(int(in.ClientGrade))
	}
	{
		const prefix string = ",\"clientComment\":"
		out.RawString(prefix)
		out.String(string(in.ClientComment))
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicContractVersion) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicContractVersion) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicContractVersion) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicContractVersion) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel1(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel2(in *jlexer.Lexer, out *OutputResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel2(out *jwriter.Writer, in OutputResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OutputResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OutputResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OutputResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OutputResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel2(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel3(in *jlexer.Lexer, out *ExtendedOutputFreelancer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "freelancer":
			if in.IsNull() {
				in.Skip()
				out.OuFreel = nil
			} else {
				if out.OuFreel == nil {
					out.OuFreel = new(FreelancerOutput)
				}
				easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel4(in, out.OuFreel)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel3(out *jwriter.Writer, in ExtendedOutputFreelancer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"freelancer\":"
		out.RawString(prefix[1:])
		if in.OuFreel == nil {
			out.RawString("null")
		} else {
			easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel4(out, *in.OuFreel)
		}
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendedOutputFreelancer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendedOutputFreelancer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendedOutputFreelancer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendedOutputFreelancer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel3(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel4(in *jlexer.Lexer, out *FreelancerOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "accountId":
			out.AccountId = int64(in.Int64())
		case "country":
			out.Country = string(in.String())
		case "city":
			out.City = string(in.String())
		case "address":
			out.Address = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "tagline":
			out.TagLine = string(in.String())
		case "overview":
			out.Overview = string(in.String())
		case "experienceLevelId":
			out.ExperienceLevelId = int64(in.Int64())
		case "specialityId":
			out.SpecialityId = int64(in.Int64Str())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel4(out *jwriter.Writer, in FreelancerOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountId))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"tagline\":"
		out.RawString(prefix)
		out.String(string(in.TagLine))
	}
	{
		const prefix string = ",\"overview\":"
		out.RawString(prefix)
		out.String(string(in.Overview))
	}
	{
		const prefix string = ",\"experienceLevelId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExperienceLevelId))
	}
	{
		const prefix string = ",\"specialityId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.SpecialityId))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel5(in *jlexer.Lexer, out *ExtendResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Response":
			if in.IsNull() {
				in.Skip()
				out.R = nil
			} else {
				if out.R == nil {
					out.R = new(Response)
				}
				(*out.R).UnmarshalEasyJSON(in)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "lastName":
			out.SecondName = string(in.String())
		case "jobTitle":
			out.JobTitle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel5(out *jwriter.Writer, in ExtendResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Response\":"
		out.RawString(prefix[1:])
		if in.R == nil {
			out.RawString("null")
		} else {
			(*in.R).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"lastName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"jobTitle\":"
		out.RawString(prefix)
		out.String(string(in.JobTitle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel5(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel6(in *jlexer.Lexer, out *ExtendFreelancer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "freelancer":
			if in.IsNull() {
				in.Skip()
				out.F = nil
			} else {
				if out.F == nil {
					out.F = new(Freelancer)
				}
				easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel7(in, out.F)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel6(out *jwriter.Writer, in ExtendFreelancer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"freelancer\":"
		out.RawString(prefix[1:])
		if in.F == nil {
			out.RawString("null")
		} else {
			easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel7(out, *in.F)
		}
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExtendFreelancer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExtendFreelancer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExtendFreelancer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExtendFreelancer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel6(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel7(in *jlexer.Lexer, out *Freelancer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int64(in.Int64())
		case "accountId":
			out.AccountId = int64(in.Int64())
		case "country":
			out.Country = int64(in.Int64())
		case "city":
			out.City = int64(in.Int64())
		case "address":
			out.Address = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "tagline":
			out.TagLine = string(in.String())
		case "overview":
			out.Overview = string(in.String())
		case "experienceLevelId":
			out.ExperienceLevelId = int64(in.Int64())
		case "specialityId":
			out.SpecialityId = int64(in.Int64Str())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel7(out *jwriter.Writer, in Freelancer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"accountId\":"
		out.RawString(prefix)
		out.Int64(int64(in.AccountId))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.Int64(int64(in.Country))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.Int64(int64(in.City))
	}
	{
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		out.String(string(in.Address))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"tagline\":"
		out.RawString(prefix)
		out.String(string(in.TagLine))
	}
	{
		const prefix string = ",\"overview\":"
		out.RawString(prefix)
		out.String(string(in.Overview))
	}
	{
		const prefix string = ",\"experienceLevelId\":"
		out.RawString(prefix)
		out.Int64(int64(in.ExperienceLevelId))
	}
	{
		const prefix string = ",\"specialityId\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.SpecialityId))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel8(in *jlexer.Lexer, out *ContractOutputFreelancer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "freelancer":
			if in.IsNull() {
				in.Skip()
				out.OuFreel = nil
			} else {
				if out.OuFreel == nil {
					out.OuFreel = new(FreelancerOutput)
				}
				easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel4(in, out.OuFreel)
			}
		case "firstName":
			out.FirstName = string(in.String())
		case "secondName":
			out.SecondName = string(in.String())
		case "contracts":
			if in.IsNull() {
				in.Skip()
				out.Contracts = nil
			} else {
				if out.Contracts == nil {
					out.Contracts = new(FreelancerContracts)
				}
				easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel9(in, out.Contracts)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel8(out *jwriter.Writer, in ContractOutputFreelancer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"freelancer\":"
		out.RawString(prefix[1:])
		if in.OuFreel == nil {
			out.RawString("null")
		} else {
			easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel4(out, *in.OuFreel)
		}
	}
	{
		const prefix string = ",\"firstName\":"
		out.RawString(prefix)
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"secondName\":"
		out.RawString(prefix)
		out.String(string(in.SecondName))
	}
	{
		const prefix string = ",\"contracts\":"
		out.RawString(prefix)
		if in.Contracts == nil {
			out.RawString("null")
		} else {
			easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel9(out, *in.Contracts)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ContractOutputFreelancer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ContractOutputFreelancer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ContractOutputFreelancer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ContractOutputFreelancer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel8(l, v)
}
func easyjson61e0ab13DecodeGithubComGoParkMailRu20192ComandusInternalModel9(in *jlexer.Lexer, out *FreelancerContracts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "active":
			out.ActiveContracts = int64(in.Int64())
		case "success":
			out.SuccessContracts = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson61e0ab13EncodeGithubComGoParkMailRu20192ComandusInternalModel9(out *jwriter.Writer, in FreelancerContracts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"active\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.ActiveContracts))
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Int64(int64(in.SuccessContracts))
	}
	out.RawByte('}')
}
